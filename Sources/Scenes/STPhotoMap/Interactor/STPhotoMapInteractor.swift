//
//  STPhotoMapInteractor.swift
//  STPhotoMap
//
//  Created by Crasneanu Cristian on 12/04/2019.
//  Copyright (c) 2019 mikelanza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol STPhotoMapBusinessLogic {
    func shouldUpdateVisibleTiles(request: STPhotoMapModels.VisibleTiles.Request)
    
    func shouldCacheGeojsonObjects()
    func shouldDetermineEntityLevel()
    func shouldDetermineLocationLevel()
    func shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request)
    func shouldSelectPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationSelection.Request)
    func shouldNavigateToPhotoDetails(request: STPhotoMapModels.PhotoDetailsNavigation.Request)
    func shouldSelectPhotoClusterAnnotation(request: STPhotoMapModels.PhotoClusterAnnotationSelection.Request)
}

protocol STPhotoMapDataStore {
}

class STPhotoMapInteractor: STPhotoMapBusinessLogic, STPhotoMapDataStore, STPhotoMapWorkerDelegate {
    var presenter: STPhotoMapPresentationLogic?
    var worker: STPhotoMapWorker?
    
    var visibleTiles: [TileCoordinate]
    var cacheHandler: STPhotoMapCacheHandler
    var entityLevelHandler: STPhotoMapEntityLevelHandler
    var locationLevelHandler: STPhotoMapLocationLevelHandler
    
    init() {
        self.visibleTiles = []
        self.cacheHandler = STPhotoMapCacheHandler()
        self.entityLevelHandler = STPhotoMapEntityLevelHandler()
        self.locationLevelHandler = STPhotoMapLocationLevelHandler()
        self.worker = STPhotoMapWorker(delegate: self)
        self.entityLevelHandler.delegate = self
    }
    
    internal func getVisibleCachedTiles() -> [STPhotoMapCache.Tile] {
        return self.visibleTiles.compactMap({ tile -> STPhotoMapCache.Tile? in
            let url = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tile)
            return try? self.cacheHandler.cache.getTile(for: url.keyUrl)
        })
    }
}

// MARK: - Business logic

extension STPhotoMapInteractor {
    func shouldUpdateVisibleTiles(request: STPhotoMapModels.VisibleTiles.Request) {
        self.visibleTiles = request.tiles
    }
    
    func shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request) {
        if request.photoAnnotation.image == nil {
            request.photoAnnotation.isLoading = true
            self.worker?.downloadImageForPhotoAnnotation(request.photoAnnotation)
        }
    }
    
    func shouldNavigateToPhotoDetails(request: STPhotoMapModels.PhotoDetailsNavigation.Request) {
        self.presenter?.presentNavigateToPhotoDetails(response: STPhotoMapModels.PhotoDetailsNavigation.Response(photoId: request.photoId))
    }
}

// MARK: - Entity handler delegate

extension STPhotoMapInteractor: STPhotoMapEntityLevelHandlerDelegate {
    func photoMapEntityLevelHandler(newEntityLevel level: EntityLevel) {
        self.worker?.cancelAllGeojsonEntityLevelOperations()
        self.worker?.cancelAllGeojsonLocationLevelOperations()
        
        self.presenter?.presentRemoveLocationAnnotations()
        self.presenter?.presentRemoveLocationOverlay()
        self.presenter?.presentEntityLevel(response: STPhotoMapModels.EntityZoomLevel.Response(entityLevel: level))
    }
    
    func photoMapEntityLevelHandler(location level: EntityLevel) {
        self.worker?.cancelAllGeojsonEntityLevelOperations()
        
        self.presenter?.presentEntityLevel(response: STPhotoMapModels.EntityZoomLevel.Response(entityLevel: level))
        self.shouldDetermineLocationLevel()
    }
}

extension STPhotoMapInteractor {
    func shouldSelectPhotoClusterAnnotation(request: STPhotoMapModels.PhotoClusterAnnotationSelection.Request) {
        let zoomLevel = request.zoomLevel
        let clusterAnnotation = request.clusterAnnotation
        let photoIds = clusterAnnotation.photoIds
        
        if zoomLevel == 20 && photoIds.count > 15 {
            self.presenter?.presentNavigateToSpecificPhotos(response: STPhotoMapModels.SpecificPhotosNavigation.Response(photoIds: photoIds))
        }
    }
}
