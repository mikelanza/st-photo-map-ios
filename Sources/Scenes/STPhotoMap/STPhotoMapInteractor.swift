//
//  STPhotoMapInteractor.swift
//  STPhotoMap
//
//  Created by Crasneanu Cristian on 12/04/2019.
//  Copyright (c) 2019 mikelanza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol STPhotoMapBusinessLogic {
    func shouldUpdateVisibleTiles(request: STPhotoMapModels.VisibleTiles.Request)
    
    func shouldCacheGeojsonObjects()
}

protocol STPhotoMapDataStore {
}

class STPhotoMapInteractor: STPhotoMapBusinessLogic, STPhotoMapDataStore {
    var presenter: STPhotoMapPresentationLogic?
    var worker: STPhotoMapWorker?
    
    var visibleTiles: [TileCoordinate]
    var cache: STPhotoMapCache
    
    init() {
        self.visibleTiles = []
        self.cache = STPhotoMapCache()
        self.worker = STPhotoMapWorker(delegate: self)
    }
}

// MARK: Business

extension STPhotoMapInteractor {
    func shouldUpdateVisibleTiles(request: STPhotoMapModels.VisibleTiles.Request) {
        self.visibleTiles = request.tiles
    }
    
    func shouldCacheGeojsonObjects() {
        self.visibleTiles.forEach { tileCoordinate in
            let geojsonTileUrl = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tileCoordinate)
            if self.cache.getTile(for: geojsonTileUrl.keyUrl) == nil {
                self.worker?.getGeojsonTileForCaching(tileCoordinate: tileCoordinate, keyUrl: geojsonTileUrl.keyUrl, downloadUrl: geojsonTileUrl.downloadUrl)
            }
        }
    }
}

// MARK: - Worker delegate

extension STPhotoMapInteractor: STPhotoMapWorkerDelegate {
    func successDidGetGeojsonTileForCaching(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, geojsonObject: GeoJSONObject) {
        self.cache.addTile(tile: STPhotoMapCache.Tile(keyUrl: keyUrl, geojsonObject: geojsonObject))
    }
    
    func failureDidGetGeojsonTileForCaching(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, error: OperationError) {
        
    }
}
