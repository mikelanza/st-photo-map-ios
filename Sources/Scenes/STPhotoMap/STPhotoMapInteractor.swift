//
//  STPhotoMapInteractor.swift
//  STPhotoMap
//
//  Created by Crasneanu Cristian on 12/04/2019.
//  Copyright (c) 2019 mikelanza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol STPhotoMapBusinessLogic {
    func shouldUpdateVisibleTiles(request: STPhotoMapModels.VisibleTiles.Request)
    
    func shouldCacheGeojsonObjects()
}

protocol STPhotoMapDataStore {
}

class STPhotoMapInteractor: STPhotoMapBusinessLogic, STPhotoMapDataStore {
    var presenter: STPhotoMapPresentationLogic?
    var worker: STPhotoMapWorker?
    
    var visibleTiles: [TileCoordinate]
    var cacheHandler: STPhotoMapCacheHandler
    var entityLevelHandler: STPhotoMapEntityLevelHandler
    
    init() {
        self.visibleTiles = []
        self.cacheHandler = STPhotoMapCacheHandler()
        self.entityLevelHandler = STPhotoMapEntityLevelHandler()
        self.worker = STPhotoMapWorker(delegate: self)
        self.entityLevelHandler.delegate = self
    }
}

// MARK: - Business logic

extension STPhotoMapInteractor {
    func shouldUpdateVisibleTiles(request: STPhotoMapModels.VisibleTiles.Request) {
        self.visibleTiles = request.tiles
    }
}

// MARK: - Caching logic

extension STPhotoMapInteractor {
    func shouldCacheGeojsonObjects() {
        let tiles = self.prepareTilesForCaching()
        self.cacheGeojsonObjectsFor(tiles: tiles)
    }
    
    private func prepareTilesForCaching() -> [TileCoordinate] {
        var tiles: [TileCoordinate] = []
        for tile in self.visibleTiles {
            let url = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tile)
            if self.cacheHandler.activeDownloads.contains(url.keyUrl) {
                continue
            }
            if self.cacheHandler.cache.getTile(for: url.keyUrl) != nil {
                continue
            }
            tiles.append(tile)
        }
        return tiles
    }
    
    private func cacheGeojsonObjectsFor(tiles: [TileCoordinate]) {
        for tile in tiles {
            let url = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tile)
            self.cacheHandler.activeDownloads.append(url.keyUrl)
            self.worker?.getGeojsonTileForCaching(tileCoordinate: tile, keyUrl: url.keyUrl, downloadUrl: url.downloadUrl)
        }
    }
}

// MARK: Entity Level logic

extension STPhotoMapInteractor {
    func shouldDetermineEntityLevel() {
        
    }
    
    func getVisibleCachedTiles() -> [TileCoordinate] {
        var tiles: [TileCoordinate] = []
        
        return tiles
    }
}

// MARK: STPhotoMapEntityLevelHandler Delegate

extension STPhotoMapInteractor: STPhotoMapEntityLevelHandlerDelegate {
    func photoMapEntityLevelHandler(newEntityLevel level: EntityLevel) {
        self.worker?.cancelAllGeojsonEntityLevelOperations()
        self.presenter?.presentEntityLevel(response: STPhotoMapModels.EntityZoomLevel.Response(entityLevel: level))
    }
}

// MARK: - Worker delegate

extension STPhotoMapInteractor: STPhotoMapWorkerDelegate {
    func successDidGetGeojsonTileForCaching(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, geojsonObject: GeoJSONObject) {
        self.cacheHandler.cache.addTile(tile: STPhotoMapCache.Tile(keyUrl: keyUrl, geojsonObject: geojsonObject))
        self.cacheHandler.activeDownloads.remove(where: { $0 == keyUrl })
    }
    
    func failureDidGetGeojsonTileForCaching(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, error: OperationError) {
        self.cacheHandler.activeDownloads.remove(where: { $0 == keyUrl })
    }
    
    func successDidGetGeojsonTileForEntityLevel(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, geojsonObject: GeoJSONObject) {
        self.entityLevelHandler.activeDownloads.remove(where: { $0 == keyUrl })
    }
    
    func failureDidGetGeojsonTileForEntityLevel(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, error: OperationError) {
        self.entityLevelHandler.activeDownloads.remove(where: { $0 == keyUrl })
    }
}
