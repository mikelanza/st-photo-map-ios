//
//  STPhotoMapInteractor.swift
//  STPhotoMap
//
//  Created by Crasneanu Cristian on 12/04/2019.
//  Copyright (c) 2019 mikelanza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol STPhotoMapBusinessLogic {
    func shouldUpdateVisibleTiles(request: STPhotoMapModels.VisibleTiles.Request)
    
    func shouldCacheGeojsonObjects()
    func shouldDetermineEntityLevel()
}

protocol STPhotoMapDataStore {
}

class STPhotoMapInteractor: STPhotoMapBusinessLogic, STPhotoMapDataStore {
    var presenter: STPhotoMapPresentationLogic?
    var worker: STPhotoMapWorker?
    
    var visibleTiles: [TileCoordinate]
    var cacheHandler: STPhotoMapCacheHandler
    var entityLevelHandler: STPhotoMapEntityLevelHandler
    
    init() {
        self.visibleTiles = []
        self.cacheHandler = STPhotoMapCacheHandler()
        self.entityLevelHandler = STPhotoMapEntityLevelHandler()
        self.worker = STPhotoMapWorker(delegate: self)
        self.entityLevelHandler.delegate = self
    }
}

// MARK: - Business logic

extension STPhotoMapInteractor {
    func shouldUpdateVisibleTiles(request: STPhotoMapModels.VisibleTiles.Request) {
        self.visibleTiles = request.tiles
    }
}

// MARK: - Caching logic

extension STPhotoMapInteractor {
    func shouldCacheGeojsonObjects() {
        let tiles = self.prepareTilesForCaching()
        self.cacheGeojsonObjectsFor(tiles: tiles)
    }
    
    private func prepareTilesForCaching() -> [TileCoordinate] {
        return self.visibleTiles.filter({ tile -> Bool in
            let url = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tile)
            return self.cacheHandler.shouldPrepareTileForCaching(url: url.keyUrl)
        })
    }
    
    private func cacheGeojsonObjectsFor(tiles: [TileCoordinate]) {
        tiles.forEach({ self.cacheGeojsonObjectsFor(tile: $0) })
    }
    
    private func cacheGeojsonObjectsFor(tile: TileCoordinate) {
        let url = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tile)
        self.cacheHandler.addActiveDownload(url.keyUrl)
        self.worker?.getGeojsonTileForCaching(tileCoordinate: tile, keyUrl: url.keyUrl, downloadUrl: url.downloadUrl)
    }
}

// MARK: Entity Level logic

extension STPhotoMapInteractor {
    func shouldDetermineEntityLevel() {
        let cachedTiles = self.getVisibleCachedTiles()
        
        if cachedTiles.count > 0 {
            self.calculateEntityLevelFor(cachedTiles: cachedTiles)
        } else {
            self.entityLevelGeojsonObjectsFor(tiles: self.prepareTilesForEntityLevel())
        }
        
        self.handleLoadingStateForEntityLevel()
    }
    
    private func getVisibleCachedTiles() -> [STPhotoMapCache.Tile] {
        var cachedTiles: [STPhotoMapCache.Tile] = []
        for tile in self.visibleTiles {
            let url = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tile)
            do {
                let cachedTile = try self.cacheHandler.cache.getTile(for: url.keyUrl)
                cachedTiles.append(cachedTile)
            } catch {
            }
        }
        return cachedTiles
    }
    
    private func calculateEntityLevelFor(cachedTiles: [STPhotoMapCache.Tile]) {
        let entityLevel = self.getEntityLevel(for: cachedTiles.first?.geojsonObject)
        self.entityLevelHandler.change(entityLevel: entityLevel)
    }

    private func prepareTilesForEntityLevel() -> [TileCoordinate] {
        var tiles: [TileCoordinate] = []
        for tile in self.visibleTiles {
            let url = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tile)
            if self.entityLevelHandler.hasActiveDownload(url.keyUrl) == false {
                tiles.append(tile)
            }
        }
        return tiles
    }
    
    private func entityLevelGeojsonObjectsFor(tiles: [TileCoordinate]) {
        tiles.forEach({ self.entityLevelGeojsonObjectsFor(tile: $0) })
    }
    
    private func entityLevelGeojsonObjectsFor(tile: TileCoordinate) {
        let url = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tile)
        self.entityLevelHandler.addActiveDownload(url.keyUrl)
        self.worker?.getGeojsonEntityLevel(tileCoordinate: tile, keyUrl: url.keyUrl, downloadUrl: url.downloadUrl)
    }
    
    private func getEntityLevel(for geoJSONObject: GeoJSONObject?) -> EntityLevel {
        switch geoJSONObject {
        case let featureCollection as GeoJSONFeatureCollection: return self.getEntityLevel(for: featureCollection.features.first)
        case let feature as GeoJSONFeature: return self.getEntityLevel(for: feature)
        default: break
        }
        return EntityLevel.unknown
    }
    
    private func getEntityLevel(for feature: GeoJSONFeature?) -> EntityLevel {
        guard let feature = feature else { return EntityLevel.unknown }
        guard let type = feature.photoProperties?.type else { return EntityLevel.unknown }
        return EntityLevel(rawValue: type) ?? .unknown
    }
    
    private func didGetGeojsonTileForEntityLevel(tileCoordinate: TileCoordinate, geojsonObject: GeoJSONObject) {
        if self.isStillTileVisible(tileCoordinate: tileCoordinate) {
            self.entityLevelHandler.change(entityLevel: self.getEntityLevel(for: geojsonObject))
            self.worker?.cancelAllGeojsonEntityLevelOperations()
        }
        self.handleLoadingStateForEntityLevel()
    }
    
    private func isStillTileVisible(tileCoordinate: TileCoordinate) -> Bool {
        return self.visibleTiles.contains(tileCoordinate)
    }
    
    private func handleLoadingStateForEntityLevel() {
        if self.entityLevelHandler.activeDownloads.count > 0 {
            self.presenter?.presentLoadingState()
        } else {
            self.presenter?.presentNotLoadingState()
        }
    }
}

// MARK: STPhotoMapEntityLevelHandler Delegate

extension STPhotoMapInteractor: STPhotoMapEntityLevelHandlerDelegate {
    func photoMapEntityLevelHandler(newEntityLevel level: EntityLevel) {
        self.worker?.cancelAllGeojsonEntityLevelOperations()
        self.presenter?.presentEntityLevel(response: STPhotoMapModels.EntityZoomLevel.Response(entityLevel: level))
    }
}

// MARK: - Worker delegate

extension STPhotoMapInteractor: STPhotoMapWorkerDelegate {
    func successDidGetGeojsonTileForCaching(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, geojsonObject: GeoJSONObject) {
        self.cacheHandler.cache.addTile(tile: STPhotoMapCache.Tile(keyUrl: keyUrl, geojsonObject: geojsonObject))
        self.cacheHandler.removeActiveDownload(keyUrl)
    }
    
    func failureDidGetGeojsonTileForCaching(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, error: OperationError) {
        self.cacheHandler.removeActiveDownload(keyUrl)
    }
    
    func successDidGetGeojsonTileForEntityLevel(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, geojsonObject: GeoJSONObject) {
        self.entityLevelHandler.removeActiveDownload(keyUrl)
        self.didGetGeojsonTileForEntityLevel(tileCoordinate: tileCoordinate, geojsonObject: geojsonObject)
    }
    
    func failureDidGetGeojsonTileForEntityLevel(tileCoordinate: TileCoordinate, keyUrl: String, downloadUrl: String, error: OperationError) {
        self.entityLevelHandler.removeActiveDownload(keyUrl)
        
        self.handleLoadingStateForEntityLevel()
    }
}
