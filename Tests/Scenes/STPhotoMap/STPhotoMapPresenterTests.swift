//
//  STPhotoMapPresenterTests.swift
//  STPhotoMap
//
//  Created by Dimitri Strauneanu on 12/04/2019.
//  Copyright (c) 2019 mikelanza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import STPhotoMap
import XCTest

class STPhotoMapPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: STPhotoMapPresenter!
    var displayerSpy: STPhotoMapDisplayLogicSpy!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        self.setupSTPhotoMapPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSTPhotoMapPresenter() {
        self.sut = STPhotoMapPresenter()
        
        self.displayerSpy = STPhotoMapDisplayLogicSpy()
        self.sut.displayer = self.displayerSpy
    }
    
    // MARK: Test doubles
    
    // MARK: Tests
    
    func testPresentLoadingState() {
        self.sut.presentLoadingState()
        XCTAssertTrue(self.displayerSpy.displayLoadingStateCalled)
    }
    
    func testPresentNotLoadingState() {
        self.sut.presentNotLoadingState()
        XCTAssertTrue(self.displayerSpy.displayNotLoadingStateCalled)
    }
    
    func testPresentEntityLevel() {
        let response = STPhotoMapModels.EntityZoomLevel.Response(entityLevel: EntityLevel.block)
        self.sut.presentEntityLevel(response: response)
        
        XCTAssertTrue(self.displayerSpy.displayEntityLevelCalled)
    }
    
    func testPresentLocationAnnotations() {
        let response = STPhotoMapModels.LocationAnnotations.Response(annotations: STPhotoMapSeeds().annotations())
        self.sut.presentLocationAnnotations(response: response)
        
        XCTAssertTrue(self.displayerSpy.displayLocationAnnotationsCalled)
    }
    
    func testPresentNavigateToPhotoDetails() {
        let response = STPhotoMapModels.PhotoDetailsNavigation.Response(photoId: STPhotoMapSeeds.photoId)
        self.sut.presentNavigateToPhotoDetails(response: response)
        
        XCTAssertTrue(self.displayerSpy.displayNavigateToPhotoDetailsCalled)
    }
    
    func testPresentRemoveLocationAnnotations() {
        self.sut.presentRemoveLocationAnnotations()
        
        XCTAssertTrue(self.displayerSpy.displayRemoveLocationAnnotationsCalled)
    }
    
    func testPresentLocationOverlay() {
        let response = STPhotoMapModels.LocationOverlay.Response(photo: STPhotoMapSeeds().photo())
        self.sut.presentLocationOverlay(response: response)
        
        XCTAssertTrue(self.displayerSpy.displayLocationOverlayCalled)
    }
    
    func testPresentRemoveLocationOverlay() {
        self.sut.presentRemoveLocationOverlay()
        XCTAssertTrue(self.displayerSpy.displayRemoveLocationOverlayCalled)
    }
    
    func testPresentNavigateToSpecificPhotos() {
        let photoIds = STPhotoMapSeeds().multiplePhotoClusterAnnotation(count: 10).photoIds
        let response = STPhotoMapModels.SpecificPhotosNavigation.Response(photoIds: photoIds)
        self.sut.presentNavigateToSpecificPhotos(response: response)
        XCTAssertTrue(self.displayerSpy.displayNavigateToSpecificPhotosCalled)
    }
    
    func testpPresentZoomToCoordinate() {
        let response = STPhotoMapModels.CoordinateZoom.Response(coordinate: STPhotoMapSeeds.coordinate)
        self.sut.presentZoomToCoordinate(response: response)
        XCTAssertTrue(self.displayerSpy.displayZoomToCoordinateCalled)
    }
    
    func testPresentSelectPhotoAnnotation() {
        let response = STPhotoMapModels.PhotoAnnotationSelection.Response(photoAnnotation: STPhotoMapSeeds().photoAnnotation())
        self.sut.presentSelectPhotoAnnotation(response: response)
        XCTAssertTrue(self.displayerSpy.displaySelectPhotoAnnotationCalled)
    }
    
    func testPresentDeselectPhotoAnnotation() {
        let response = STPhotoMapModels.PhotoAnnotationDeselection.Response(photoAnnotation: STPhotoMapSeeds().photoAnnotation())
        self.sut.presentDeselectPhotoAnnotation(response: response)
        XCTAssertTrue(self.displayerSpy.displayDeselectPhotoAnnotationCalled)
    }
    
    func testPresentDeselectPhotoClusterAnnotation() {
        let response = STPhotoMapModels.PhotoClusterAnnotationDeselection.Response(photoAnnotation: STPhotoMapSeeds().photoAnnotation())
        self.sut.presentDeselectPhotoClusterAnnotation(response: response)
        XCTAssertTrue(self.displayerSpy.displayDeselectPhotoClusterAnnotationCalled)
    }
    
    func testPresentSelectPhotoClusterAnnotation() {
        let response = STPhotoMapModels.PhotoClusterAnnotationSelection.Response(photoAnnotation: STPhotoMapSeeds().photoAnnotation())
        self.sut.presentSelectPhotoClusterAnnotation(response: response)
        XCTAssertTrue(self.displayerSpy.displaySelectPhotoClusterAnnotationCalled)
    }
    
    func testPresentRemoveCarousel() {
        self.sut.presentRemoveCarousel()
        XCTAssertTrue(self.displayerSpy.displayRemoveCarouselCalled)
    }
    
    func testPresentNavigateToPhotoCollection() {
        let response = STPhotoMapModels.PhotoCollectionNavigation.Response(location: STPhotoMapSeeds.location, entityLevel: EntityLevel.block)
        self.sut.presentNavigateToPhotoCollection(response: response)
        XCTAssertTrue(self.displayerSpy.displayNavigateToPhotoCollectionCalled)
    }
    
    func testPresentNewCarousel() {
        let response = STPhotoMapModels.NewCarousel.Response(carousel: STCarousel())
        self.sut.presentNewCarousel(response: response)
        XCTAssertTrue(self.displayerSpy.displayNewCarouselCalled)
    }
    
    func testPresentReloadCarousel() {
        self.sut.presentReloadCarousel()
        XCTAssertTrue(self.displayerSpy.displayReloadCarouselCalled)
    }
    
    func testPresentNewSelectedPhotoAnnotation() {
        let response = STPhotoMapModels.PhotoAnnotationSelection.Response(photoAnnotation: STPhotoMapSeeds().photoAnnotation())
        self.sut.presentNewSelectedPhotoAnnotation(response: response)
        XCTAssertTrue(self.displayerSpy.displayNewSelectedPhotoAnnotationCalled)
    }
    
    func testPresentCenterToCoordinate() {
        let response = STPhotoMapModels.CoordinateCenter.Response(coordinate: STPhotoMapSeeds.coordinate, entityLevel: EntityLevel.block)
        self.sut.presentCenterToCoordinate(response: response)
        XCTAssertTrue(self.displayerSpy.displayCenterToCoordinateCalled)
    }
    
    func testPresentOpenDataSourcesLink() {
        self.sut.presentOpenDataSourcesLink()
        XCTAssertTrue(self.displayerSpy.displayOpenDataSourcesLinkCalled)
    }
}
