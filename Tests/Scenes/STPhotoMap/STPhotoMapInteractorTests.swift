//
//  STPhotoMapInteractorTests.swift
//  STPhotoMap
//
//  Created by Dimitri Strauneanu on 12/04/2019.
//  Copyright (c) 2019 mikelanza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import STPhotoMap
import XCTest
import MapKit
import STPhotoCore

class STPhotoMapInteractorTests: XCTestCase {
    var sut: STPhotoMapInteractor!
    var presenterSpy: STPhotoMapPresentationLogicSpy!
    var workerSpy: STPhotoMapWorkerSpy!
    var currentUserLocationHandlerSpy: STPhotoMapCurrentUserLocationHandlerSpy!
    
    var workerDelay: Double = 0.1
    var delay: Double = 0.05
  
    // MARK: - Test lifecycle
  
    override func setUp() {
        super.setUp()
        self.setupSTPhotoMapInteractor()
    }
  
    override func tearDown() {
        super.tearDown()
    }
  
    // MARK: - Test setup
  
    func setupSTPhotoMapInteractor() {
        self.sut = STPhotoMapInteractor()
        
        self.presenterSpy = STPhotoMapPresentationLogicSpy()
        self.sut.presenter = self.presenterSpy
        
        self.workerSpy = STPhotoMapWorkerSpy(delegate: self.sut)
        self.sut.worker = self.workerSpy
        
        self.currentUserLocationHandlerSpy = STPhotoMapCurrentUserLocationHandlerSpy()
        self.currentUserLocationHandlerSpy.delegate = self.sut
        self.sut.currentUserLocationHandler = self.currentUserLocationHandlerSpy
    }
    
    private func waitForSynchronization() {
        let waitExpectation = expectation(description: "Waiting for the synchronization.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
    }
    
    private func waitForWorker(delay: Double) {
        let waitExpectation = expectation(description: "Waiting for the worker.")
        let queue = DispatchQueue.global()
        queue.asyncAfter(deadline: .now() + delay) {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
    }
    
    private func wait(delay: Double) {
        let waitExpectation = expectation(description: "Waiting.")
        let queue = DispatchQueue.global()
        queue.asyncAfter(deadline: .now() + delay) {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
    }
    
    // MARK: - Tests
      
    func testShouldUpdateVisibleTiles() {
        let tiles: [TileCoordinate] = STPhotoMapSeeds.tileCoordinates

        let request = STPhotoMapModels.VisibleTiles.Request(tiles: tiles)
        self.sut.shouldUpdateVisibleTiles(request: request)

        XCTAssertEqual(self.sut.visibleTiles.count, tiles.count)
    }
    
    func testShouldUpdateVisibleMapRect() {
        let mapRect = MKMapRect.init(origin: MKMapPoint(STPhotoMapSeeds.coordinate), size: MKMapSize(width: 100, height: 100))
        
        let request = STPhotoMapModels.VisibleMapRect.Request(mapRect: mapRect)
        self.sut.shouldUpdateVisibleMapRect(request: request)
    
        XCTAssertEqual(self.sut.visibleMapRect.height, mapRect.height)
        XCTAssertEqual(self.sut.visibleMapRect.width, mapRect.width)
        XCTAssertEqual(self.sut.visibleMapRect.origin.x, mapRect.origin.x)
        XCTAssertEqual(self.sut.visibleMapRect.origin.y, mapRect.origin.y)
    }
    
    func testShouldUpdateSelectedPhotoAnnotation() {
        let annotations = STPhotoMapSeeds().photoAnnotations()
        self.sut.selectedPhotoAnnotation = annotations.first
        
        let request = STPhotoMapModels.SelectedPhotoAnnotation.Request(annotation: annotations.last)
        self.sut.shouldUpdateSelectedPhotoAnnotation(request: request)
        
        XCTAssertEqual(self.sut.selectedPhotoAnnotation, annotations.last)
    }
    
    func testShouldOpenDataSourcesLink() {
        self.sut.shouldOpenDataSourcesLink()
        XCTAssertTrue(self.presenterSpy.presentOpenDataSourcesLinkCalled)
    }
    
    func testShouldOpenSettingsApplication() {
        self.sut.shouldOpenSettingsApplication()
        XCTAssertTrue(self.presenterSpy.presentOpenApplicationCalled)
    }
    
    // MARK: - Navigation tests
    
    func testShouldNavigateToPhotoDetails() {
        let request = STPhotoMapModels.PhotoDetailsNavigation.Request(photoId: STPhotoMapSeeds.photoId)
        self.sut.shouldNavigateToPhotoDetails(request: request)
        
        XCTAssertTrue(self.presenterSpy.presentNavigateToPhotoDetailsCalled)
    }
    
    func testShouldNavigateToPhotoCollection() {
        let request = STPhotoMapModels.PhotoCollectionNavigation.Request(location: STPhotoMapSeeds.location, entityLevel: EntityLevel.block)
        self.sut.shouldNavigateToPhotoCollection(request: request)
        
        XCTAssertTrue(self.presenterSpy.presentNavigateToPhotoCollectionCalled)
    }

    // MARK: - Download image for photo annotation
    
    func testShouldDownloadImageForPhotoAnnotationShouldUpdateLoadingTrueForPhotoAnnotation() {
        self.workerSpy.delay = self.workerDelay
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        photoAnnotation.image = nil
        self.sut.shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation))
        XCTAssertTrue(photoAnnotation.isLoading)
    }
    
    func testShouldDownloadImageForPhotoAnnotationShouldUpdateLoadingFalseForPhotoAnnotation() {
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        photoAnnotation.image = nil
        self.sut.shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation))
        XCTAssertFalse(photoAnnotation.isLoading)
    }
    
    func testShouldDownloadImageForPhotoAnnotationShouldUpdateImageForPhotoAnnotation() {
        self.workerSpy.image = UIImage()
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        photoAnnotation.image = nil
        self.sut.shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation))
        XCTAssertNotNil(photoAnnotation.image)
    }
    
    func testShouldDownloadImageForPhotoAnnotationShouldAskTheWorkerToGetImageForPhotoAnnotation() {
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        photoAnnotation.image = nil
        self.sut.shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation))
        XCTAssertTrue(self.workerSpy.getImageForPhotoAnnotationCalled)
    }
    
    func testShouldDownloadImageForPhotoAnnotationWhenThereIsAnImage() {
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        let request = STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation)
        self.sut.shouldDownloadImageForPhotoAnnotation(request: request)
        XCTAssertFalse(self.workerSpy.getImageForPhotoAnnotationCalled)
    }
}
