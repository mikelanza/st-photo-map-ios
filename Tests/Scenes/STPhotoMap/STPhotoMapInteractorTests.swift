//
//  STPhotoMapInteractorTests.swift
//  STPhotoMap
//
//  Created by Dimitri Strauneanu on 12/04/2019.
//  Copyright (c) 2019 Streetography. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import STPhotoMap
import XCTest
import MapKit
import STPhotoCore

class STPhotoMapInteractorTests: XCTestCase {
    var sut: STPhotoMapInteractor!
    var presenterSpy: STPhotoMapPresentationLogicSpy!
    var workerSpy: STPhotoMapWorkerSpy!
  
    // MARK: - Test lifecycle
  
    override func setUp() {
        super.setUp()
        self.setupSTPhotoMapInteractor()
    }
  
    override func tearDown() {
        super.tearDown()
    }
  
    // MARK: - Test setup
  
    func setupSTPhotoMapInteractor() {
        self.sut = STPhotoMapInteractor()
        
        self.presenterSpy = STPhotoMapPresentationLogicSpy()
        self.sut.presenter = self.presenterSpy
        
        self.workerSpy = STPhotoMapWorkerSpy(delegate: self.sut)
        self.sut.worker = self.workerSpy
    }
    
    // MARK: - Tests
      
    func testShouldUpdateVisibleTiles() {
        let tiles: [TileCoordinate] = STPhotoMapSeeds.tileCoordinates

        let request = STPhotoMapModels.VisibleTiles.Request(tiles: tiles)
        self.sut.shouldUpdateVisibleTiles(request: request)

        XCTAssertEqual(self.sut.visibleTiles.count, tiles.count)
    }
    
    func testShouldUpdateVisibleMapRect() {
        let mapRect = MKMapRect.init(origin: MKMapPoint(STPhotoMapSeeds.coordinate), size: MKMapSize(width: 100, height: 100))
        
        let request = STPhotoMapModels.VisibleMapRect.Request(mapRect: mapRect)
        self.sut.shouldUpdateVisibleMapRect(request: request)
    
        XCTAssertEqual(self.sut.visibleMapRect.height, mapRect.height)
        XCTAssertEqual(self.sut.visibleMapRect.width, mapRect.width)
        XCTAssertEqual(self.sut.visibleMapRect.origin.x, mapRect.origin.x)
        XCTAssertEqual(self.sut.visibleMapRect.origin.y, mapRect.origin.y)
    }
    
    func testShouldUpdateSelectedPhotoAnnotation() {
        let annotations = STPhotoMapSeeds().photoAnnotations()
        self.sut.selectedPhotoAnnotation = annotations.first
        
        let request = STPhotoMapModels.SelectedPhotoAnnotation.Request(annotation: annotations.last)
        self.sut.shouldUpdateSelectedPhotoAnnotation(request: request)
        
        XCTAssertEqual(self.sut.selectedPhotoAnnotation, annotations.last)
    }
    
    func testShouldOpenDataSourcesLink() {
        self.sut.shouldOpenDataSourcesLink()
        XCTAssertTrue(self.presenterSpy.presentOpenDataSourcesLinkCalled)
    }
    
    func testShouldOpenSettingsApplication() {
        self.sut.shouldOpenSettingsApplication()
        XCTAssertTrue(self.presenterSpy.presentOpenApplicationCalled)
    }
    
    // MARK: - Navigation tests
    
    func testShouldNavigateToPhotoDetails() {
        let request = STPhotoMapModels.PhotoDetailsNavigation.Request(photoId: STPhotoMapSeeds.photoId)
        self.sut.shouldNavigateToPhotoDetails(request: request)
        
        XCTAssertTrue(self.presenterSpy.presentNavigateToPhotoDetailsCalled)
    }
    
    func testShouldNavigateToPhotoCollection() {
        let request = STPhotoMapModels.PhotoCollectionNavigation.Request(location: STPhotoMapSeeds.location, entityLevel: EntityLevel.block)
        self.sut.shouldNavigateToPhotoCollection(request: request)
        
        XCTAssertTrue(self.presenterSpy.presentNavigateToPhotoCollectionCalled)
    }

    // MARK: - Download image for photo annotation
    
    func testShouldDownloadImageForPhotoAnnotationShouldUpdateLoadingTrueForPhotoAnnotation() {
        self.sut.worker = nil
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        photoAnnotation.image = nil
        self.sut.shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation))
        XCTAssertTrue(photoAnnotation.isLoading)
    }
    
    func testShouldDownloadImageForPhotoAnnotationShouldUpdateLoadingFalseForPhotoAnnotation() {
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        photoAnnotation.image = nil
        self.sut.shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation))
        XCTAssertFalse(photoAnnotation.isLoading)
    }
    
    func testShouldDownloadImageForPhotoAnnotationShouldUpdateImageForPhotoAnnotation() {
        self.workerSpy.image = UIImage()
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        photoAnnotation.image = nil
        self.sut.shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation))
        XCTAssertNotNil(photoAnnotation.image)
    }
    
    func testShouldDownloadImageForPhotoAnnotationShouldAskTheWorkerToGetImageForPhotoAnnotation() {
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        photoAnnotation.image = nil
        self.sut.shouldDownloadImageForPhotoAnnotation(request: STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation))
        XCTAssertTrue(self.workerSpy.getImageForPhotoAnnotationCalled)
    }
    
    func testShouldDownloadImageForPhotoAnnotationWhenThereIsAnImage() {
        let photoAnnotation = STPhotoMapSeeds().photoAnnotation()
        let request = STPhotoMapModels.PhotoAnnotationImageDownload.Request(photoAnnotation: photoAnnotation)
        self.sut.shouldDownloadImageForPhotoAnnotation(request: request)
        XCTAssertFalse(self.workerSpy.getImageForPhotoAnnotationCalled)
    }
    
    // MARK: - Carousel handler delegate
    
    func testCarouselHandlerReloadCarouselShouldAskThePresenterToReloadCarousel() {
        self.sut.carouselHandler(handler: nil, reloadCarousel: STCarousel())
        XCTAssertTrue(self.presenterSpy.presentReloadCarouselCalled)
    }
    
    func testSuccessDidGetImageForPhotoShouldAddDownloadedPhotoForCarousel() {
        let spy = STPhotoMapCarouselHandlerSpy()
        self.sut.carouselHandler = spy
        self.sut.successDidGetImageForPhoto(photo: STPhotoMapSeeds().photo(), image: UIImage())
        XCTAssertTrue(spy.addDownloadedCarouselPhotoCalled)
    }
    
    func testSuccessDidGetGeoEntityForEntityShouldAskThePresenterToPresentNotLoadingState() throws {
        let geoEntity = try STPhotoMapSeeds().geoEntity()
        self.sut.successDidGetGeoEntityForEntity(entityId: "\(geoEntity.id)", entityLevel: geoEntity.entityLevel, geoEntity: geoEntity)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingStateCalled)
    }
    
    func testSuccessDidGetGeoEntityForEntityShouldAskThePresenterToPresentRemoveCarousel() throws {
        let geoEntity = try STPhotoMapSeeds().geoEntity()
        self.sut.successDidGetGeoEntityForEntity(entityId: "\(geoEntity.id)", entityLevel: geoEntity.entityLevel, geoEntity: geoEntity)
        XCTAssertTrue(self.presenterSpy.presentRemoveCarouselCalled)
    }
    
    func testSuccessDidGetGeoEntityForEntityShouldUpdateCarouselForGeoEntity() throws {
        let geoEntity = try STPhotoMapSeeds().geoEntity()
        let spy = STPhotoMapCarouselHandlerSpy()
        self.sut.carouselHandler = spy
        self.sut.successDidGetGeoEntityForEntity(entityId: "\(geoEntity.id)", entityLevel: geoEntity.entityLevel, geoEntity: geoEntity)
        XCTAssertTrue(spy.updateCarouselForCalled)
    }
    
    func testSuccessDidGetGeoEntityForEntityShouldAskTheWorkerToGetImageForPhoto() throws {
        let geoEntity = try STPhotoMapSeeds().geoEntity()
        self.sut.successDidGetGeoEntityForEntity(entityId: "\(geoEntity.id)", entityLevel: geoEntity.entityLevel, geoEntity: geoEntity)
        XCTAssertTrue(self.workerSpy.getImageForPhotoCalled)
    }
    
    func testSuccessDidGetGeoEntityForEntityShouldAskThePresenterToPresentNewCarousel() throws {
        let geoEntity = try STPhotoMapSeeds().geoEntity()
        self.sut.successDidGetGeoEntityForEntity(entityId: "\(geoEntity.id)", entityLevel: geoEntity.entityLevel, geoEntity: geoEntity)
        XCTAssertTrue(self.presenterSpy.presentNewCarouselCalled)
    }
    
    func testFailureDidGetGeoEntityForEntityShouldAskThePresenterToPresentNotLoadingState() throws {
        let geoEntity = try STPhotoMapSeeds().geoEntity()
        self.sut.failureDidGetGeoEntityForEntity(entityId: "\(geoEntity.id)", entityLevel: geoEntity.entityLevel, error: OperationError.noDataAvailable)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingStateCalled)
    }
}
