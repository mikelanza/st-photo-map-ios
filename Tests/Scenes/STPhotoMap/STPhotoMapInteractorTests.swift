//
//  STPhotoMapInteractorTests.swift
//  STPhotoMap
//
//  Created by Dimitri Strauneanu on 12/04/2019.
//  Copyright (c) 2019 mikelanza. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import STPhotoMap
import XCTest

class STPhotoMapInteractorTests: XCTestCase {
    // MARK: Subject under test
  
    var sut: STPhotoMapInteractor!
    var presenterSpy: STPhotoMapPresentationLogicSpy!
    var workerSpy: STPhotoMapWorkerSpy!
  
    // MARK: Test lifecycle
  
    override func setUp() {
        super.setUp()
        self.setupSTPhotoMapInteractor()
    }
  
    override func tearDown() {
        super.tearDown()
    }
  
    // MARK: Test setup
  
    func setupSTPhotoMapInteractor() {
        self.sut = STPhotoMapInteractor()
        
        self.presenterSpy = STPhotoMapPresentationLogicSpy()
        self.sut.presenter = self.presenterSpy
        
        self.workerSpy = STPhotoMapWorkerSpy(delegate: self.sut)
        self.sut.worker = self.workerSpy
    }
    
    // MARK: Test doubles
  
    // MARK: Tests
      
    func testShouldUpdateVisibleTiles() {
        let tiles: [TileCoordinate] = STPhotoMapSeeds.tileCoordinates
        let request = STPhotoMapModels.VisibleTiles.Request(tiles: tiles)
        self.sut.shouldUpdateVisibleTiles(request: request)
        
        XCTAssertEqual(self.sut.visibleTiles.count, tiles.count)
    }
    
    func testShouldCacheGeojsonObjectsWhenCacheIsEmpty() {
        self.sut.cacheHandler.cache.removeAllTiles()
        self.sut.cacheHandler.removeAllActiveDownloads()
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = STPhotoMapSeeds.tileCoordinates
        self.sut.shouldCacheGeojsonObjects()
        
        XCTAssertTrue(self.workerSpy.getGeojsonTileForCachingCalled)
    }
    
    func testShouldCacheGeojsonObjectsWhenCacheIsNotEmpty() throws {
        let tileCoordinate = STPhotoMapSeeds.tileCoordinate
        let keyUrl = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tileCoordinate).keyUrl
        let geojsonObject = try STPhotoMapSeeds().geojsonObject()
        
        self.sut.cacheHandler.removeAllActiveDownloads()
        self.sut.cacheHandler.cache.addTile(tile: STPhotoMapCache.Tile(keyUrl: keyUrl, geojsonObject: geojsonObject))
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = [tileCoordinate]
        self.sut.shouldCacheGeojsonObjects()
        
        XCTAssertFalse(self.workerSpy.getGeojsonTileForCachingCalled)
    }
    
    func testShouldCacheGeojsonObjectsWhenCacheIsEmptyAndThereAreActiveDownloads() {
        let tileCoordinate = STPhotoMapSeeds.tileCoordinate
        let keyUrl = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tileCoordinate).keyUrl
        
        self.sut.cacheHandler.cache.removeAllTiles()
        self.sut.cacheHandler.addActiveDownload(keyUrl)
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = [tileCoordinate]
        self.sut.shouldCacheGeojsonObjects()
        
        XCTAssertFalse(self.workerSpy.getGeojsonTileForCachingCalled)
    }
    
    func testShouldCacheGeojsonObjectsWhenCacheIsNotEmptyAndThereAreActiveDownloads() throws {
        let tileCoordinates = STPhotoMapSeeds.tileCoordinates
        let keyUrl = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tileCoordinates.first!).keyUrl
        let geojsonObject = try STPhotoMapSeeds().geojsonObject()
        
        self.sut.cacheHandler.addActiveDownload(keyUrl)
        self.sut.cacheHandler.cache.addTile(tile: STPhotoMapCache.Tile(keyUrl: keyUrl, geojsonObject: geojsonObject))
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = tileCoordinates
        self.sut.shouldCacheGeojsonObjects()
        
        XCTAssertTrue(self.workerSpy.getGeojsonTileForCachingCalled)
    }
    
    func testShouldDetermineEntityLevelWhenCacheIsEmptyAndThereAreNoActiveDownloadsWithSuccess() {
        let worker = STPhotoMapWorkerSuccessSpy(delegate: self.sut)
        self.sut.worker = worker
        
        self.sut.cacheHandler.cache.removeAllTiles()
        self.sut.cacheHandler.removeAllActiveDownloads()
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = [TileCoordinate(zoom: 10, x: 1, y: 2)]
        self.sut.shouldDetermineEntityLevel()
        
        XCTAssertTrue(worker.getGeojsonTileForEntityLevelCalled)
        XCTAssertFalse(self.presenterSpy.presentLoadingStateCalled)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingStateCalled)
        
        XCTAssertTrue(self.presenterSpy.presentEntityLevelCalled)
    }
    
    func testShouldDetermineEntityLevelWhenCacheIsEmptyAndThereAreNoActiveDownloadsWithFailure() {
        let worker = STPhotoMapWorkerFailureSpy(delegate: self.sut)
        self.sut.worker = worker
        
        self.sut.cacheHandler.cache.removeAllTiles()
        self.sut.cacheHandler.removeAllActiveDownloads()
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = [TileCoordinate(zoom: 10, x: 1, y: 2)]
        self.sut.shouldDetermineEntityLevel()
        
        XCTAssertTrue(worker.getGeojsonTileForEntityLevelCalled)
        XCTAssertFalse(self.presenterSpy.presentLoadingStateCalled)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingStateCalled)
        
        XCTAssertFalse(self.presenterSpy.presentEntityLevelCalled)
    }
    
    func testShouldDetermineEntityLevelWhenCacheIsEmptyAndThereAreActiveDownloads() {
        let tileCoordinate = TileCoordinate(zoom: 10, x: 1, y: 2)
        let keyUrl = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tileCoordinate).keyUrl
        
        self.sut.cacheHandler.cache.removeAllTiles()
        self.sut.cacheHandler.removeAllActiveDownloads()
        
        self.sut.entityLevelHandler.addActiveDownload(keyUrl)
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = [TileCoordinate(zoom: 10, x: 1, y: 2)]
        self.sut.shouldDetermineEntityLevel()
        
        XCTAssertFalse(self.workerSpy.getGeojsonTileForEntityLevelCalled)
        XCTAssertTrue(self.presenterSpy.presentLoadingStateCalled)
        XCTAssertFalse(self.presenterSpy.presentNotLoadingStateCalled)
        XCTAssertFalse(self.presenterSpy.presentEntityLevelCalled)
    }
    
    func testShouldDetermineEntityLevelWhenCacheIsNotEmptyAndNoActiveDownloads() throws {
        let tileCoordinate = TileCoordinate(zoom: 10, x: 1, y: 2)
        let keyUrl = STPhotoMapUrlBuilder().geojsonTileUrl(tileCoordinate: tileCoordinate).keyUrl
        
        let geojsonObject = try STPhotoMapSeeds().geojsonObject()
        
        self.sut.cacheHandler.removeAllActiveDownloads()
        self.sut.cacheHandler.cache.addTile(tile: STPhotoMapCache.Tile(keyUrl: keyUrl, geojsonObject: geojsonObject))
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = [tileCoordinate]
        self.sut.shouldDetermineEntityLevel()
        
        XCTAssertFalse(self.workerSpy.getGeojsonTileForCachingCalled)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingStateCalled)
        XCTAssertFalse(self.presenterSpy.presentLoadingStateCalled)
        XCTAssertTrue(self.presenterSpy.presentEntityLevelCalled)
    }
    
    func testShouldDetermineEntityLevelWhenNewEntityLevelIsNotChanged() {
        let worker = STPhotoMapWorkerSuccessSpy(delegate: self.sut)
        self.sut.worker = worker
        
        self.sut.cacheHandler.cache.removeAllTiles()
        self.sut.cacheHandler.removeAllActiveDownloads()
        
        self.sut.entityLevelHandler.entityLevel = .city
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = [TileCoordinate(zoom: 10, x: 1, y: 2)]
        self.sut.shouldDetermineEntityLevel()
        
        XCTAssertTrue(worker.getGeojsonTileForEntityLevelCalled)
        XCTAssertFalse(self.presenterSpy.presentLoadingStateCalled)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingStateCalled)
        
        XCTAssertFalse(self.presenterSpy.presentEntityLevelCalled)
    }
    
    func testShouldDetermineEntityLevelWhenNewEntityLevelIsChanged() {
        let worker = STPhotoMapWorkerSuccessSpy(delegate: self.sut)
        self.sut.worker = worker
        
        self.sut.cacheHandler.cache.removeAllTiles()
        self.sut.cacheHandler.removeAllActiveDownloads()
        
        self.sut.entityLevelHandler.entityLevel = .unknown
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 1.0)
        
        self.sut.visibleTiles = [TileCoordinate(zoom: 10, x: 1, y: 2)]
        self.sut.shouldDetermineEntityLevel()
        
        XCTAssertTrue(worker.getGeojsonTileForEntityLevelCalled)
        XCTAssertFalse(self.presenterSpy.presentLoadingStateCalled)
        XCTAssertTrue(self.presenterSpy.presentNotLoadingStateCalled)
        
        XCTAssertTrue(self.presenterSpy.presentEntityLevelCalled)
    }
    
    func testShouldDetermineEntityLevelWhenDownloadedTileIsNotStillVisible() {
        let worker = STPhotoMapWorkerSuccessSpy(delegate: self.sut)
        self.sut.worker = worker
        
        self.sut.visibleTiles = [TileCoordinate(zoom: 10, x: 1, y: 2)]
        
        let waitExpectation = expectation(description: "Waiting for the synchronized arrays.")
        let queue = DispatchQueue(label: "queue", attributes: .concurrent)
        queue.async {
            waitExpectation.fulfill()
        }
        waitForExpectations(timeout: 10.0)
        
        self.sut.shouldDetermineEntityLevel()
        self.sut.visibleTiles.removeAll()
        
        XCTAssertTrue(worker.getGeojsonTileForEntityLevelCalled)
        XCTAssertFalse(self.presenterSpy.presentEntityLevelCalled)
    }
    
}
